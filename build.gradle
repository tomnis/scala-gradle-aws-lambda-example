plugins {
    id 'scala'
    id 'com.github.johnrengelman.shadow' version '2.0.0'
    id 'jp.classmethod.aws.lambda' version '0.35'
}

import com.amazonaws.services.lambda.model.Runtime;
import com.amazonaws.services.lambda.model.InvocationType;
import jp.classmethod.aws.gradle.lambda.AWSLambdaDeleteFunctionTask;
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask;
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask;

version = '0.1-SNAPSHOT'

ext.functionName = 'dot-product'
ext.mutableFunctionName = ext.functionName + "-mutable"
ext.immutableFunctionName = ext.functionName + "-immutable"
ext.role = "arn:aws:iam::${aws.accountId}:role/lambda"
ext.timeout = 8 // it might be slow the first time :(
ext.memorySize = 512 // in MB
ext.runtime = Runtime.Java8
ext.payload = file("src/test/resources/input.json") // sample input data, 2 serialized vectors in 3-space
ext.invocationType = InvocationType.RequestResponse
ext.artifactPath = shadowJar.archivePath // path to the shadowjar. we'll upload this jar to lambda when creating functions

repositories {
    jcenter()
}

dependencies {
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.141'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.1.0'
    compile group: 'org.json4s', name: 'json4s-jackson_2.12', version: '3.5.2'
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.12.2'
    compile group: 'org.tinylog', name: 'tinylog', version: '1.2'

    testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: '3.0.3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
    version = project.version
}

// uploads our shadowjar artifact to lambda.
// your ~/.aws/credentials file should be correctly populated with key and secret
task uploadMutableLambda(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
    functionName = project.mutableFunctionName
    role = project.role
    runtime = project.runtime
    timeout = project.timeout
    memorySize = project.memorySize
    zipFile = project.artifactPath
    handler = 'com.workday.warp.handlers.MutableDotProductHandler::handleRequest'
}

// deletes the lambda function associated with our mutable request type
task deleteMutableLambda(type: AWSLambdaDeleteFunctionTask) {
    functionName = project.mutableFunctionName
}

// invokes the lambda function associated with our mutable request type
task invokeMutableLambda(type: AWSLambdaInvokeTask) {
    functionName = project.mutableFunctionName
    invocationType = project.invocationType
    payload = project.payload
    doLast {
        println "Lambda function (using mutable java-bean deserialization) results: "
        println "  status code: " + invokeResult.statusCode
        println "  payload: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}


// similar tasks for immutable version using json4s deserialization.
task uploadImmutableLambda(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
    functionName = project.immutableFunctionName
    role = project.role
    runtime = project.runtime
    timeout = project.timeout
    memorySize = project.memorySize
    zipFile = project.artifactPath
    handler = 'com.workday.warp.handlers.ImmutableDotProductHandler::handleRequest'
}

task deleteImmutableLambda(type: AWSLambdaDeleteFunctionTask) {
    functionName = project.immutableFunctionName
}

task invokeImmutableLambda(type: AWSLambdaInvokeTask) {
    functionName = project.immutableFunctionName
    invocationType = project.invocationType
    payload = project.payload
    doLast {
        println "Lambda function (using immutable json4s deserialization) results: "
        println "  status code: " + invokeResult.statusCode
        println "  payload: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}